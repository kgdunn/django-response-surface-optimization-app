# Dependancies (other than a basic Python + Django):
# pip install -U subprocess32

from django.shortcuts import render

import sys
import time
if sys.version_info < (3, 2, 0):
    import subprocess32 as subprocess
else:
    import subprocess
    

def run_simulation():
    """Runs simulation of the required ``System``, with timeout. Returns a 
    result no matter what, even if it is the default result (failure state).
    """
    # https://docs.python.org/2/library/functions.html#compile
    #https://stackoverflow.com/questions/2983963/run-a-external-program-with-specified-max-running-time
    
    # https://stackoverflow.com/questions/1191374/subprocess-with-timeout
    
    
    start_time = time.clock()
    code = r"""
    def simulate(A):
        coded = (A - 135)/15.0
        y = round(coded * 15 - 2.4 * coded * coded + 93, 1) 
        return '{{\"output\": {0}}}'.format(*(y,))
    """
    
    code = "\nimport numpy as np\n" + code + "\n\nprint(simulate(A=227))"
    command = r'python -c"{0}"'.format(code)
    proc = subprocess.Popen(command, shell=True, bufsize=-1, 
                            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    
    try:
        std_out, std_err = proc.communicate(None, timeout=1)
        
    except subprocess.TimeoutExpired:
        std_out = 0.0
        std_err = 'Timeout'
    
    duration = time.clock() - start_time
    
def process_simulation_input():
    """Cleans up the inputs from the web-based (typically human-readable) form,
    into numeric format expected by the simulation.
    """
    # NOTE: all inputs must be converted to floating point, to avoid any
    # discrepancy with integer division.
    pass
    
def process_simulation_output():
    """Cleans simulation output JSON, parses it, and returns it to be saved in 
    the ``Results`` objects.
    
    The output processing includes:
    * the addition of noise to the primary output
    * runs any post-processing function specified in the model (e.g. clamping
      to certain minimum and maximum bounds)
    * adding the time-delay before results are displayed to the user.
    """
    pass

def show_all_systems():
    """
    Returns all the systems available to simulate at the user's current level.    
    """
    pass

def show_one_system():
    """ Returns the details of one system that has been selected, including
    the leaderboard (generated by another function)"""
    pass

def leaderboard_results():
    """ Returns the leaderboard for the current system.
    """
    pass


    

